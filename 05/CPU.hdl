// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Decoder
    // Output instruction codes(16-bit) mainly as control bits to other chips
    // output all zeros when it is a A-instruction
    Mux16(a=false, b=instruction, sel=instruction[15], out=cIns, out[15]=opCode,
    	out[0]=j3, out[1]=j2, out[2]=j1, out[3]=writeM, out[4]=d2, out[5]=d1,
	out[6]=c6, out[7]=c5, out[8]=c4, out[9]=c3, out[10]=c2, out[11]=c1, out[12]=aCompBit);

    // Select from ALU output and instruction input
    Mux16(a=instruction, b=aluOutput, sel=instruction[15], out=inputA);

    // A register
    Not(in=opCode, out=nOpCode);
    Or(a=nOpCode, b=d1, out=loadARegister);
    ARegister(in=inputA, load=loadARegister, out=outputA, out[0..14]=addressM);

    // Select from Memory input and A register output
    Mux16(a=outputA, b=inM, sel=aCompBit, out=aOrM);

    // ALU
    ALU(x=outputD, y=aOrM, 
    	zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6,
	zr=aluOutputZero, ng=aluOutputNegative,
	out=aluOutput, out=outM);

    // D register
    DRegister(in=aluOutput, load=d2, out=outputD);

    // Process ALU output to determine load-bit(jump or not) for PC 
    And(a=aluOutputZero, b=j2, out=jeq);
    And(a=aluOutputNegative, b=j1, out=jlt);
    Not(in=aluOutputZero, out=aluOutputNotZero);
    Not(in=aluOutputNegative, out=aluOutputNotNegative);
    And(a=aluOutputNotZero, b=aluOutputNotNegative, out=aluOutputPositive);
    And(a=aluOutputPositive, b=j3, out=jgt);
    Or(a=jeq, b=jlt, out=jle);
    Or(a=jle, b=jgt, out=jmpOrNot);

    // PC 
    Not(in=jmpOrNot, out=inc);
    PC(in=outputA, inc=inc, load=jmpOrNot, reset=reset, out[0..14]=pc);
}
