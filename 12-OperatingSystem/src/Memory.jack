// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    // the start of the free list, should be initialized to the start address of the heap
    static Array heap, freeList;

    /** Initializes the class. */
    function void init() {
        // heap - [2048, 16384), or 2k to 16k
        let heap = 2048;

        // the start of the free list, dynamically changing due to memory allocation, initialized
        // to the heap itself as a huge available segment
        let freeList = heap;
        
        // next segment: no next for now
        let heap[0] = 0;
        // current segment length: the whole heap but excluding the two housekeeping fields
        let heap[1] = 16384 - 2048 - 2;
        
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return heap[address - heap];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let heap[address - heap] = value;
        
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. 
     *  Note that: if seg stands for the address of a available segment block, then
     *      - seg[0] is the base address of the next block, 0 if null
     *      - seg[1] is the length of this block, excluding seg[0] and seg[1]
     *      - the allocated space starts at seg + 2, skipping the first two
     *          housekeeping fields.
     */
    function int alloc(int size) {
        // cut off new segment block from current segment block for first-fit strategy
        // use Array type so that we can access the words after the base address
        // need to keep track of prev pointer so as to cut a node from the list without
        // breaking the consistency
        var Array currSegment, newSegment, prevSegment;

        // start from the tail of free list
        let currSegment = freeList;
        
        // iteratively search through the linked list to find the first-fit segment
        // the loop terminates either if such segment is found or if the end of heap is reached
        while ((currSegment[1] < (size + 2)) & ~(currSegment[0] = 0)) {
            let prevSegment = currSegment;
            let currSegment = currSegment[0];
        }
        // an available segment is found, allocate space by cutting off some chunk of memory from
        // the current segment, updating relevant values and return this new segment
        if (~(currSegment[1] < (size + 2))) {
            // exactly match
            if (currSegment[1] = (size + 2)) {
                // prepare to return this segment
                let prevSegment[0] = currSegment[0];

                // return the start of the allocated space for use (but not the segment itself)
                return currSegment + 2;
            } else { // currSegment's length  > size + 2
                // cut off size+2 words from currSegment, set fields
                // let newSegment = (currSegment + 2 + currSegment[1]) - size - 2;
                let newSegment = currSegment + currSegment[1] - size;
                let newSegment[0] = 0;
                let newSegment[1] = size;

                // currSegment size shrinks by size + 2
                let currSegment[1] = currSegment[1] - size - 2;

                // return base address
                return newSegment;
            }
        }
        
        // no such space available
        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array seg;
        
        let seg = o - 2; // retrieve the two fields

        // insert to the tail of freeList
        let seg[0] = freeList;
        let freeList = seg;

        return;
    }    
}
