// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    // the address of the field s and the object is the same
    field Array s;
    // the actual number of characters in the string array, as compared to max length (or capacity)
    field int length, capacity;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        // support 0 capacity string
        if (maxLength = 0) {
            let maxLength = 1;
        }
        
        let s = Array.new(maxLength);        
        let capacity = maxLength;
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        // dispose all object variable first
        do s.dispose();

        // finally, destroy THIS
        do Memory.deAlloc(this);
        
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        // take care of out-of-bound j pointer
        if (j < length) {
            return s[j];
        }

        // out of bound, return null character
        return 0;
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let s[j] = c;
        
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < capacity) {
            let s[length] = c;
            let length = length + 1;
        }

        // Although THIS has the same address as Array s, this method should
        // return a String type value
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            // decrement first for we are using 0-index
            let length = length - 1;
            
            // set it to be null character
            let s[length] = 0;
        }

        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, val;
        var boolean negativeSign;
        
        let negativeSign = false;
        let i = 0;
        let val = 0;

        // is the first character a negative sign?
        if (s[i] = 45) {
            let negativeSign = true;
            // increment pointer
            let i = i + 1;
        }

        // i is within the bound and s[i] is a digit character
        while ((i < length) & (s[i] > 47) & (s[i] < 58)) {
            let val = val * 10 + (s[i] - 48); // 48 as '0'
            let i = i + 1;
        }
        
        if (i > 0) {
            if (negativeSign) {
                return -val;
            } else {
                return val;
            }
        }

        // there is no value or only a sign
        return 0;
    }


    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0; // reset string
        
        // negative number
        if (val < 0) {
            do appendChar(45); // append '-' sign
            let val = -val; // operate on positive number
        }

        do setIntegerResursively(val);

        return;
    }

    
    /** Must use a helper recursive function to avoid clear the original string recursively and 
        lead to infinite loop. */
    method void setIntegerResursively(int val) {
        var char c;
        
        // LSD
        let c = String.digitToChar(val - ((val / 10) * 10));

        // recursively process the val excluding LSD while it is a multi-digit number
        if (~(val < 10)) { 
            do setIntegerResursively(val / 10);
        }
        
        // append LSD
        do appendChar(c);

        // if (val < 10) { // val < 10, val is single-digit number
        //     do appendChar(c);
        // } else { // val >= 10, val is a multi-digit number
        //     do setIntegerResursively(val / 10);
        //     do appendChar(c);
        // }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    /** Helper: is a character ASCII digit? */
    function boolean isDigit(char c) {
        return ((c > 47) & (c < 58));
    }
    /** Helper: make a digit ASCII */
    function char digitToChar(int digit) {
        return digit + 48; // 48 as '0'
    }
    /** Helper: make a ASCII character a digit */
    function char charToDigit(char c) {
        return c - 48;
    }
}