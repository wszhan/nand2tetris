// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    // the address of the field s and the object is the same
    field Array s;
    // the actual number of characters in the string array, as compared to max length (or capacity)
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let s = Array.new(maxLength);        
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return s[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let s[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let s[length] = c;
        let length = length + 1;
        return s;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        let s[length] = 0;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, val;
        
        let i = 0;
        let val = 0;

        // i is within the bound and s[i] is a digit character
        while ((i < length) & (s[i] > 47) & (s[i] < 58)) {
            let val = val * 10 + s[i];
            let i = i + 1;
        }
        
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int c;

        while (length > 0) {
            do eraseLastChar();

            // isntance variable length is decremented within 
            // the eraseLastChar() method, so no need to do it here
        }

        let c = val - ((val / 10) * 10) + 48; // 48 as the ASCII value of '0'

        // if (~(val < 10)) {
        //     do setInt(val / 10);
        // }

        if (val < 10) {
            do appendChar(c);
        } else {
            do setInt(val / 10);
            do appendChar(c);
        }
        
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
